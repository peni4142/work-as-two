{"version":3,"sources":["../webpack/bootstrap","../external \"vscode\"",".././src/logic/enum.ts",".././src/extension.ts",".././src/api.ts",".././src/logic/pathHandler.ts","../external \"fs\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","HandSide","context","console","log","disposable","vscode","commands","registerCommand","window","showInformationMessage","API","run","subscriptions","push","workspace","onDidOpenTextDocument","e","complemantary","this","ph","mapPath","fileName","path","lastOpened","openTextDocument","Uri","file","then","showTextDocument","handSide","Left","Right","PathHandler","pathRight","escapedRegex","result","pathLeft","pathMapping","existsSync","test","newPath","replace"],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = require(\"vscode\");","\n\nexport enum HandSide {\n    Left =\"left\",\n    Right = \"right\"\n}","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport { API } from './api';\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"work-as-two\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\tlet disposable = vscode.commands.registerCommand('extension.helloWorld', () => {\n\t\t// The code you place here will be executed every time your command is executed\n\n\t\t// Display a message box to the user\n\t\tvscode.window.showInformationMessage('Hello World!');\n\t});\n\n\tAPI.run();\n\n\n\tcontext.subscriptions.push(disposable);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n","import { workspace, TextDocument, window, Uri } from \"vscode\";\nimport { PathHandler } from \"./logic/pathHandler\";\nimport { IMapPathResult } from \"./logic/interfaces\";\nimport { HandSide } from \"./logic/enum\";\n\n\n\n\nexport class API {\n\n    private static lastOpened: string = \"\";\n    private static ph: PathHandler = new PathHandler({\n        pathRight: {\n            escapedRegex: /^([^.]*)(\\.ts)/,\n            result: \"$1.test$2\"\n        },\n        pathLeft: {\n            escapedRegex: /^([^.]*)\\.test(\\.ts)/,\n            result: \"$1$2\"\n        }\n    });\n\n\n    public static run() {\n\n        workspace.onDidOpenTextDocument((e: TextDocument) => {\n            let complemantary: IMapPathResult | null = this.ph.mapPath(e.fileName);\n            try {\n                if (complemantary && complemantary.path !== this.lastOpened) {\n                    window.showInformationMessage(\"should open\");\n                    workspace.openTextDocument(Uri.file(complemantary.path))\n                        .then((d: TextDocument) => {\n                            window.showTextDocument(d, complemantary?.handSide=== HandSide.Left? 1:2);\n                            window.showTextDocument(e, complemantary?.handSide=== HandSide.Right? 1:2);\n                        });\n                }\n            }\n            finally {\n                this.lastOpened = e.fileName;\n            }\n        });\n    }\n}","import { existsSync } from \"fs\";\nimport { IPathMapping, IRegexReplacement, IMapPathResult } from \"./interfaces\";\nimport { HandSide } from \"./enum\";\n\nexport class PathHandler {\n\n    constructor(private pathMapping: IPathMapping) {\n\n    }\n\n    public mapPath(path: string): IMapPathResult | null {\n        if (existsSync(path)) {\n            if (this.pathMapping.pathLeft.escapedRegex.test(path)) {\n                let newPath = path.replace(this.pathMapping.pathLeft.escapedRegex ,this.pathMapping.pathLeft.result);\n                if (existsSync(newPath)) {\n                    return {\n                        path : newPath,\n                        handSide: HandSide.Left\n                    };\n                }\n            }\n            if (this.pathMapping.pathRight.escapedRegex.test(path)) {\n                let newPath = path.replace(this.pathMapping.pathRight.escapedRegex ,this.pathMapping.pathRight.result);\n                if (existsSync(newPath)) {\n                    return {\n                        path : newPath,\n                        handSide: HandSide.Right\n                    };\n                }\n            }\n        }\n        return null;\n    }\n}","module.exports = require(\"fs\");"],"sourceRoot":""}